---
# yamllint disable rule:line-length
name: Release Binary

'on':
  push:
    tags:
      - 'v*.*.*'

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup Python 3.11
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      - name: Verify tag matches Cargo.toml
        run: |
          set -euo pipefail
          tag="${GITHUB_REF_NAME#v}"
          export CARGO_TOML_PATH="${CARGO_TOML_PATH:-Cargo.toml}"
          python_script="import os, pathlib, tomllib; print(tomllib.loads(pathlib.Path(os.environ['CARGO_TOML_PATH']).read_text(encoding='utf-8'))['package']['version'])"
          cargo_version="$(echo "${python_script}" | "${{ steps.setup-python.outputs.python-path }}")"
          if [ -z "${cargo_version:-}" ]; then
            echo "::error title=Cargo.toml parse failure::Could not read package.version from ${toml_path}. Ensure Python â‰¥3.11 (tomllib available) and that the manifest contains [package], or set CARGO_TOML_PATH to the crate's Cargo.toml."
            exit 1
          fi
          if [ "$tag" != "$cargo_version" ]; then
            echo "::error title=Tag/Cargo.toml mismatch::Tag version $tag does not match Cargo.toml version $cargo_version"
            exit 1
          fi
          echo "Release tag $tag matches Cargo.toml version."
      - name: Setup Rust
        uses: leynos/shared-actions/.github/actions/setup-rust@1479e2ffbbf1053bb0205357dfe965299b7493ed
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build release binary
        run: cargo build --release
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}
          path: target/release/${{ env.REPO_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
      - id: download
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.REPO_NAME }}
      #- uses: softprops/action-gh-release@v2
      #  with:
      #    tag_name: ${{ github.ref_name }}
      #    generate_release_notes: true
      #    fail_on_unmatched_files: true
      #    files: ${{ steps.download.outputs.download-path }}/${{ env.REPO_NAME }}
      - name: Upload release
        run: |
          gh release upload "${{ github.ref_name }}" ${{ steps.download.outputs.download-path }}/${{ env.REPO_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
