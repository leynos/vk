---
# yamllint disable rule:line-length
name: Release Binary

'on':
  push:
    tags:
      - 'v*.*.*'

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.11
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Verify tag matches Cargo.toml
        run: |
          set -euo pipefail
          tag="${GITHUB_REF_NAME#v}"
          toml_path="${CARGO_TOML_PATH:-Cargo.toml}"
          cargo_version="$(
            CARGO_TOML_PATH="$toml_path" \
            "${{ steps.setup-python.outputs.python-path }}" - <<'PY' || echo ""
            import os, tomllib
            with open(os.environ['CARGO_TOML_PATH'], 'rb') as f:
                print(tomllib.load(f)['package']['version'])
            PY
          )"
          if [ -z "${cargo_version:-}" ]; then
            echo "::error title=Cargo.toml parse failure::Could not read package.version from ${toml_path}. Ensure Python â‰¥3.11 (tomllib available) and that the manifest contains [package], or set CARGO_TOML_PATH to the crate's Cargo.toml."
            exit 1
          fi
          if [ "$tag" != "$cargo_version" ]; then
            echo "::error title=Tag/Cargo.toml mismatch::Tag version $tag does not match Cargo.toml version $cargo_version"
            exit 1
          fi
          echo "Release tag $tag matches Cargo.toml version."
      - name: Setup Rust
        uses: leynos/shared-actions/.github/actions/setup-rust@c6559452842af6a83b83429129dccaf910e34562
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build release binary
        run: cargo build --release
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}
          path: target/release/${{ env.REPO_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: target/release/${{ env.REPO_NAME }}
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}
      - run: gh release upload "${{ github.ref_name }}" ${{ env.REPO_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
