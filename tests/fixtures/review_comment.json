{
  "url": "https://api.github.com/repos/leynos/bournemouth/pulls/comments/2134344072",
  "pull_request_review_id": 2908037305,
  "id": 2134344072,
  "node_id": "PRRC_kwDOO0MSNs5_N4GI",
  "diffHunk": "@@ -2,48 +2,125 @@\n \n from __future__ import annotations\n \n-import dataclasses\n import typing\n \n import falcon\n+import msgspec\n+from sqlalchemy import select, update\n \n+if typing.TYPE_CHECKING:  # pragma: no cover\n+    from sqlalchemy.ext.asyncio import AsyncSession\n \n-@dataclasses.dataclass(slots=True)\n-class ChatRequest:\n+from .models import UserAccount\n+from .openrouter import ChatMessage, Role\n+from .openrouter_service import (\n+    OpenRouterService,\n+    OpenRouterServiceBadGatewayError,\n+    OpenRouterServiceTimeoutError,\n+    chat_with_service,\n+)\n+\n+\n+class ChatRequest(msgspec.Struct):\n     \"\"\"Request body for the chat endpoint.\"\"\"\n \n     message: str\n     history: list[dict[str, typing.Any]] | None = None\n+    model: str | None = None\n \n \n class ChatResource:\n     \"\"\"Handle chat requests.\"\"\"\n \n-    async def on_post(self, req: falcon.Request, resp: falcon.Response) -> None:\n-        data = await req.get_media()\n-        if not data or \"message\" not in data:\n-            raise falcon.HTTPBadRequest(description=\"`message` field required\")\n+    def __init__(\n+        self,\n+        service: OpenRouterService,\n+        session_factory: typing.Callable[[], AsyncSession],\n+    ) -> None:\n+        self._service = service\n+        self._session_factory = session_factory\n \n-        # TODO(pmcintosh): plug in RAG and LLM call\n-        # https://github.com/example/repo/issues/1\n-        raise falcon.HTTPNotImplemented(\n-            description=\"This endpoint is not yet implemented.\"\n-        )\n+    async def on_post(self, req: falcon.Request, resp: falcon.Response) -> None:\n+        raw = await typing.cast(\"typing.Awaitable[bytes]\", req.bounded_stream.read())\n+        try:\n+            data = msgspec.json.decode(raw)\n+        except msgspec.DecodeError:\n+            raise falcon.HTTPBadRequest(description=\"invalid JSON\") from None\n+\n+        match data:\n+            case {\"message\": str(msg), **extra}:\n+                pass\n+            case _:\n+                raise falcon.HTTPBadRequest(description=\"`message` field required\")\n+        history: list[ChatMessage] = []\n+        if isinstance(extra.get(\"history\"), list):\n+            valid_roles = typing.get_args(Role)\n+            for item in extra[\"history\"]:\n+                match item:\n+                    case {\"role\": role, \"content\": str(content)} if role in valid_roles:\n+                        history.append(\n+                            ChatMessage(\n+                                role=typing.cast(\"Role\", role),\n+                                content=content,\n+                            )\n+                        )\n+                    case _:\n+                        raise falcon.HTTPBadRequest(description=\"invalid history item\")\n+\n+        history.append(ChatMessage(role=\"user\", content=msg))\n+\n+        model = typing.cast(\"str | None\", extra.get(\"model\"))\n+\n+        async with self._session_factory() as session:\n+            stmt = select(UserAccount.openrouter_token_enc).where(\n+                UserAccount.google_sub == typing.cast(\"str\", req.context[\"user\"])\n+            )\n+            result = await session.execute(stmt)\n+            token = typing.cast(\"bytes | str | None\", result.scalar_one_or_none())\n+        if not token:\n+            raise falcon.HTTPBadRequest(description=\"missing OpenRouter token\")\n+\n+        api_key = token.decode() if isinstance(token, bytes) else token\n+\n+        try:\n+            completion = await chat_with_service(\n+                self._service,\n+                api_key,\n+                history,\n+                model=model,\n+            )\n+        except OpenRouterServiceTimeoutError:\n+            raise falcon.HTTPGatewayTimeout() from None\n+        except OpenRouterServiceBadGatewayError as exc:\n+            raise falcon.HTTPBadGateway(description=str(exc)) from None  # pyright: ignore[reportUnknownArgumentType]\n+\n+        answer = completion.choices[0].message.content or \"\"",
  "path": "src/bournemouth/resources.py",
  "commit_id": "c0b0926a1b8c233e5679450b297189852f175a7a",
  "original_commit_id": "d55871f7f53a113e9fb79f06e25cc5ce7fd08d01",
  "user": {
    "login": "sourcery-ai[bot]",
    "id": 58596630,
    "node_id": "MDM6Qm90NTg1OTY2MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/in/48477?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sourcery-ai%5Bbot%5D",
    "html_url": "https://github.com/apps/sourcery-ai",
    "followers_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/received_events",
    "type": "Bot",
    "user_view_type": "public",
    "site_admin": false
  },
  "body": "**suggestion:** Handle case when completion.choices is empty\n\nAdd a check to ensure choices is not empty before accessing choices[0] to prevent IndexError.",
  "created_at": "2025-06-08T02:11:15Z",
  "updated_at": "2025-06-08T02:11:15Z",
  "html_url": "https://github.com/leynos/bournemouth/pull/17#discussion_r2134344072",
  "pull_request_url": "https://api.github.com/repos/leynos/bournemouth/pulls/17",
  "author_association": "CONTRIBUTOR",
  "_links": {
    "self": {
      "href": "https://api.github.com/repos/leynos/bournemouth/pulls/comments/2134344072"
    },
    "html": {
      "href": "https://github.com/leynos/bournemouth/pull/17#discussion_r2134344072"
    },
    "pull_request": {
      "href": "https://api.github.com/repos/leynos/bournemouth/pulls/17"
    }
  },
  "reactions": {
    "url": "https://api.github.com/repos/leynos/bournemouth/pulls/comments/2134344072/reactions",
    "total_count": 2,
    "+1": 1,
    "-1": 1,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "start_line": null,
  "original_start_line": null,
  "start_side": null,
  "line": 97,
  "original_line": 97,
  "side": "RIGHT",
  "originalPosition": 108,
  "position": 108,
  "subject_type": "line"
}
